version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: jetchat-postgres
    env_file:
      - .env.prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jetchat-network

  jetchat:
    image: masterbaiter/jetchat-ruby_on_rails:latest
    container_name: jetchat-app
    env_file:
      - .env.prod
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      RAILS_ENV: ${RAILS_ENV}
      SERVER_PORT: ${SERVER_PORT}
      # Database URLs for Rails multi-database setup
      DATABASE_URL: ${DATABASE_URL}
      CACHE_DATABASE_URL: ${CACHE_DATABASE_URL}
      QUEUE_DATABASE_URL: ${QUEUE_DATABASE_URL}
      CABLE_DATABASE_URL: ${CABLE_DATABASE_URL}
      # Database Configuration
      MODUL_223_DATABASE_PASSWORD: ${MODUL_223_DATABASE_PASSWORD}
      # Zitadel OAuth Configuration
      ZITADEL_ISSUER: ${ZITADEL_ISSUER}
      ZITADEL_CLIENT_ID: ${ZITADEL_CLIENT_ID}
      # Rails Configuration
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
      RAILS_SERVE_STATIC_FILES: ${RAILS_SERVE_STATIC_FILES}
      RAILS_LOG_TO_STDOUT: ${RAILS_LOG_TO_STDOUT}
      # Security
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
    ports:
      - "5000:5000"
    volumes:
      - app_storage:/rails/storage
    networks:
      - jetchat-network
    restart: unless-stopped
    command: >
      sh -c "
        bin/rails db:create db:migrate &&
        bin/rails server -b 0.0.0.0 -p 5000
      "

volumes:
  postgres_data:
  app_storage:

networks:
  jetchat-network:
    driver: bridge