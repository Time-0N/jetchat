<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "JetChat" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <%= action_cable_meta_tag %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">

    <%# Includes all stylesheet files in app/assets/stylesheets %>
    <%= stylesheet_link_tag :app, "data-turbo-track": "reload" %>

    <script src="https://cdn.jsdelivr.net/npm/@rails/actioncable@7.0.0/app/assets/javascripts/actioncable.js"></script>
  </head>

  <body>
    <!-- Notification Container -->
    <div id="notification-container"></div>

    <!-- Flash Messages for Notification System -->
    <% flash.each do |type, message| %>
      <div data-flash-message data-flash-type="<%= type == 'notice' ? 'success' : type == 'alert' ? 'error' : type %>" style="display: none;"><%= message %></div>
    <% end %>

    <% unless controller_name == 'home' && action_name == 'index' %>
      <header class="app-header">
        <div class="header-content">
          <%= link_to dashboard_path, class: "app-logo" do %>
            <div class="app-logo-icon">üí¨</div>
            <span>JetChat</span>
          <% end %>

          <nav class="nav-menu">
            <%= link_to friends_path, class: "nav-link #{'active' if controller_name == 'friends' && action_name == 'index'}" do %>
              <span>üë•</span>
              <span>Friends</span>
            <% end %>

            <%= link_to discover_friends_path, class: "nav-link #{'active' if controller_name == 'friends' && action_name == 'discover'}" do %>
              <span>üîç</span>
              <span>Discover</span>
            <% end %>

            <%= link_to chat_rooms_path, class: "nav-link #{'active' if controller_name == 'chat_rooms'}" do %>
              <span>üí¨</span>
              <span>Chats</span>
            <% end %>

            <%= link_to friend_requests_path, class: "nav-link #{'active' if controller_name == 'friend_requests'}" do %>
              <span>üì¨</span>
              <span>Requests</span>
              <% user = defined?(current_user) && current_user ? current_user : @current_user %>
              <% if user&.pending_friend_requests_count && user.pending_friend_requests_count > 0 %>
                <span class="nav-badge"><%= user.pending_friend_requests_count %></span>
              <% end %>
            <% end %>
          </nav>

          <div class="user-menu">
            <% if (defined?(current_user) && current_user) || (defined?(@current_user) && @current_user) %>
              <%= button_to "/auth/logout", method: :post, class: "logout-btn", data: { confirm: "Are you sure you want to logout?" } do %>
                <span>üö™</span>
                <span>Logout</span>
              <% end %>
            <% end %>
          </div>
        </div>
      </header>

      <main class="main-content">
        <%= yield %>
      </main>
    <% else %>
      <%= yield %>
    <% end %>

    <!-- Notification System - Available immediately -->
    <script>
      // Notification System Class
      class NotificationSystem {
          constructor() {
              this.container = document.getElementById('notification-container') || this.createContainer();
              this.notifications = new Map();
              this.maxNotifications = 5;
              this.defaultDuration = 4000;
          }

          createContainer() {
              const container = document.createElement('div');
              container.id = 'notification-container';
              if (document.body) {
                  document.body.appendChild(container);
              }
              return container;
          }

          show(message, type = 'info', options = {}) {
              const config = {
                  title: options.title || this.getDefaultTitle(type),
                  message: message,
                  type: type,
                  duration: options.duration || this.defaultDuration,
                  closable: options.closable !== false,
                  id: options.id || this.generateId()
              };

              if (this.notifications.has(config.id)) {
                  this.hide(config.id);
              }

              if (this.notifications.size >= this.maxNotifications) {
                  const oldestId = this.notifications.keys().next().value;
                  this.hide(oldestId);
              }

              const notification = this.createElement(config);
              this.container.appendChild(notification);
              this.notifications.set(config.id, notification);

              requestAnimationFrame(() => {
                  notification.classList.add('show');
              });

              if (config.duration > 0) {
                  setTimeout(() => {
                      this.hide(config.id);
                  }, config.duration);
              }

              return config.id;
          }

          success(message, options = {}) { return this.show(message, 'success', options); }
          error(message, options = {}) { return this.show(message, 'error', { duration: 6000, ...options }); }
          warning(message, options = {}) { return this.show(message, 'warning', { duration: 5000, ...options }); }
          info(message, options = {}) { return this.show(message, 'info', options); }

          hide(id) {
              if (!this.notifications.has(id)) return;
              const notification = this.notifications.get(id);
              notification.classList.remove('show');
              notification.classList.add('hide');
              setTimeout(() => {
                  if (notification.parentNode) {
                      notification.parentNode.removeChild(notification);
                  }
                  this.notifications.delete(id);
              }, 300);
          }

          createElement(config) {
              const notification = document.createElement('div');
              notification.className = `notification ${config.type}`;
              notification.style.setProperty('--duration', `${config.duration}ms`);

              notification.innerHTML = `
                  <div class="notification-content">
                      <div class="notification-icon"></div>
                      <div class="notification-message">
                          <div class="notification-title">${this.escapeHtml(config.title)}</div>
                          <div class="notification-text">${this.escapeHtml(config.message)}</div>
                      </div>
                  </div>
                  ${config.closable ? '<button class="notification-close" aria-label="Close">&times;</button>' : ''}
              `;

              if (config.closable) {
                  const closeBtn = notification.querySelector('.notification-close');
                  closeBtn.addEventListener('click', (e) => {
                      e.stopPropagation();
                      this.hide(config.id);
                  });
              }

              notification.addEventListener('click', () => {
                  this.hide(config.id);
              });

              return notification;
          }

          getDefaultTitle(type) {
              const titles = { success: 'Success!', error: 'Error', warning: 'Warning', info: 'Info' };
              return titles[type] || 'Notification';
          }

          generateId() {
              return `notification-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
          }

          escapeHtml(text) {
              const div = document.createElement('div');
              div.textContent = text;
              return div.innerHTML;
          }
      }

      // Initialize immediately - available everywhere
      window.notifications = new NotificationSystem();

      // Global helper functions - available immediately
      window.showNotification = (message, type, options) => window.notifications.show(message, type, options);
      window.showSuccess = (message, options) => window.notifications.success(message, options);
      window.showError = (message, options) => window.notifications.error(message, options);
      window.showWarning = (message, options) => window.notifications.warning(message, options);
      window.showInfo = (message, options) => window.notifications.info(message, options);

      // Handle Rails flash messages when DOM is ready
      document.addEventListener('DOMContentLoaded', function() {
          const flashMessages = document.querySelectorAll('[data-flash-message]');
          flashMessages.forEach(flash => {
              const message = flash.textContent.trim();
              const type = flash.dataset.flashType || 'info';
              if (message) {
                  window.notifications.show(message, type);
              }
              flash.remove();
          });
      });
    </script>

    <%= javascript_importmap_tags %>

    <% if (defined?(current_user) && current_user) || (defined?(@current_user) && @current_user) %>
      <script>
        document.addEventListener('DOMContentLoaded', function() {
          // Subscribe to presence channel for global online/offline status
          if (typeof ActionCable !== 'undefined') {
            const cable = ActionCable.createConsumer();
            const presenceChannel = cable.subscriptions.create('PresenceChannel');
          }
        });
      </script>
    <% end %>
  </body>
</html>
