<div class="chat-container" data-chat-room-id="<%= @chat_room.id %>">
  <header class="chat-header">
    <div class="chat-info">
      <h2>
        <% if @chat_room.is_private? && @other_user %>
          <%= @other_user.name %>
        <% else %>
          <%= @chat_room.name %>
        <% end %>
      </h2>
      <div class="user-status" id="user-status">
        <% if @other_user %>
          <span class="status-indicator offline" id="status-indicator"></span>
          <span id="status-text">Offline</span>
        <% end %>
      </div>
    </div>

    <div class="chat-actions">
      <%= link_to "← Back to Chats", chat_rooms_path, class: "btn btn-secondary btn-sm" %>
    </div>
  </header>

  <div class="messages-container" id="messages-container">
    <div class="messages-list" id="messages-list">
      <% (@messages || []).each do |message| %>
        <div class="message <%= 'own-message' if message.user == @current_user %>" data-message-id="<%= message.id %>">
          <div class="message-content">
            <div class="message-header">
              <span class="sender-name"><%= message.user.name %></span>
              <span class="message-time"><%= message.created_at.strftime('%H:%M') %></span>
            </div>
            <div class="message-body">
              <%= simple_format(message.content) %>
            </div>
          </div>
        </div>
      <% end %>
    </div>

    <div class="typing-indicator" id="typing-indicator" style="display: none;">
      <span id="typing-text"></span>
    </div>
  </div>

  <form class="message-form" id="message-form">
    <div class="message-input-container">
      <textarea
        id="message-input"
        placeholder="Type your message..."
        rows="1"
        maxlength="2000"></textarea>
      <button type="submit" class="send-btn" id="send-btn">
        <span class="send-icon">→</span>
      </button>
    </div>
  </form>
</div>

<style>
    .chat-index-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem;
    }

    .chat-rooms-list {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .chat-room-card {
        border-bottom: 1px solid #f1f3f4;
    }

    .chat-room-card:last-child {
        border-bottom: none;
    }

    .chat-room-link {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem;
        text-decoration: none;
        color: inherit;
        transition: background-color 0.2s;
    }

    .chat-room-link:hover {
        background: #f8f9fa;
    }

    .chat-room-info h3 {
        margin: 0 0 0.5rem 0;
        color: #2c3e50;
    }

    .last-message {
        margin: 0 0 0.25rem 0;
        color: #7f8c8d;
        font-size: 0.9rem;
    }

    .sender {
        font-weight: 600;
        color: #34495e;
    }

    .last-message-time {
        margin: 0;
        color: #95a5a6;
        font-size: 0.8rem;
    }

    .chat-room-meta {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .unread-badge {
        background: #e74c3c;
        color: white;
        border-radius: 50%;
        width: 1.5rem;
        height: 1.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.8rem;
        font-weight: bold;
    }

    .arrow {
        color: #95a5a6;
        font-size: 1.2rem;
    }

    .chat-container {
        height: 100vh;
        display: flex;
        flex-direction: column;
        max-width: 1000px;
        margin: 0 auto;
    }

    .chat-header {
        background: white;
        padding: 1rem 2rem;
        border-bottom: 1px solid #e1e8ed;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .chat-info h2 {
        margin: 0 0 0.25rem 0;
        color: #2c3e50;
    }

    .user-status {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
        color: #7f8c8d;
    }

    .status-indicator {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #95a5a6;
    }

    .status-indicator.online {
        background: #27ae60;
    }

    .messages-container {
        flex: 1;
        overflow: hidden;
        display: flex;
        flex-direction: column;
    }

    .messages-list {
        flex: 1;
        overflow-y: auto;
        padding: 1rem 2rem;
        background: #f8f9fa;
    }

    .message {
        margin-bottom: 1rem;
        display: flex;
    }

    .own-message {
        justify-content: flex-end;
    }

    .message-content {
        max-width: 70%;
        background: white;
        border-radius: 18px;
        padding: 0.75rem 1rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .own-message .message-content {
        background: #3498db;
        color: white;
    }

    .message-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.25rem;
    }

    .sender-name {
        font-weight: 600;
        font-size: 0.8rem;
    }

    .own-message .sender-name {
        color: rgba(255,255,255,0.9);
    }

    .message-time {
        font-size: 0.7rem;
        opacity: 0.7;
    }

    .message-body {
        font-size: 0.9rem;
        line-height: 1.4;
    }

    .typing-indicator {
        padding: 0.5rem 2rem;
        font-style: italic;
        color: #7f8c8d;
        background: #f8f9fa;
    }

    .message-form {
        background: white;
        padding: 1rem 2rem;
        border-top: 1px solid #e1e8ed;
    }

    .message-input-container {
        display: flex;
        gap: 0.5rem;
        align-items: flex-end;
    }

    #message-input {
        flex: 1;
        border: 2px solid #e1e8ed;
        border-radius: 20px;
        padding: 0.75rem 1rem;
        resize: none;
        font-family: inherit;
        font-size: 0.9rem;
        outline: none;
        transition: border-color 0.2s;
    }

    #message-input:focus {
        border-color: #3498db;
    }

    .send-btn {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: none;
        background: #3498db;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .send-btn:hover {
        background: #2980b9;
    }

    .send-btn:disabled {
        background: #95a5a6;
        cursor: not-allowed;
    }

    .send-icon {
        font-size: 1.2rem;
        font-weight: bold;
    }

    .btn-sm {
        padding: 0.5rem 1rem;
        font-size: 0.8rem;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const chatRoomId = document.querySelector('.chat-container')?.dataset.chatRoomId;
        if (!chatRoomId) return;

        // Initialize Action Cable
        const consumer = ActionCable.createConsumer();
        const chatChannel = consumer.subscriptions.create({
            channel: 'ChatRoomChannel',
            chat_room_id: chatRoomId
        }, {
            received: function(data) {
                if (data.type === 'user_status') {
                    updateUserStatus(data);
                } else if (data.type === 'typing') {
                    handleTypingIndicator(data);
                } else {
                    addMessage(data);
                }
            }
        });

        const messagesList = document.getElementById('messages-list');
        const messageInput = document.getElementById('message-input');
        const messageForm = document.getElementById('message-form');
        const sendBtn = document.getElementById('send-btn');

        let typingTimer;
        let isTyping = false;

        // Auto-scroll to bottom
        function scrollToBottom() {
            messagesList.scrollTop = messagesList.scrollHeight;
        }

        // Add message to chat
        function addMessage(data) {
            const messageDiv = document.createElement('div');
            const currentUserId = parseInt('<%= @current_user.id %>');
            const isOwnMessage = data.user.id === currentUserId;

            messageDiv.className = `message ${isOwnMessage ? 'own-message' : ''}`;
            messageDiv.innerHTML = `
      <div class="message-content">
        <div class="message-header">
          <span class="sender-name">${data.user.name}</span>
          <span class="message-time">${data.created_at}</span>
        </div>
        <div class="message-body">${data.content.replace(/\n/g, '<br>')}</div>
      </div>
    `;

            messagesList.appendChild(messageDiv);
            scrollToBottom();
        }

        // Handle user status updates
        function updateUserStatus(data) {
            const statusIndicator = document.getElementById('status-indicator');
            const statusText = document.getElementById('status-text');

            if (statusIndicator && statusText) {
                if (data.status === 'online') {
                    statusIndicator.classList.add('online');
                    statusText.textContent = 'Online';
                } else {
                    statusIndicator.classList.remove('online');
                    statusText.textContent = 'Offline';
                }
            }
        }

        // Handle typing indicators
        function handleTypingIndicator(data) {
            const currentUserId = parseInt('<%= @current_user_id %>');
            if (data.user_id === currentUserId) return;

            const typingIndicator = document.getElementById('typing-indicator');
            const typingText = document.getElementById('typing-text');

            if (data.typing) {
                typingText.textContent = `${data.user_name} is typing...`;
                typingIndicator.style.display = 'block';
            } else {
                typingIndicator.style.display = 'none';
            }
        }

        // Send message
        messageForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const content = messageInput.value.trim();

            if (content) {
                chatChannel.send({ message: content });
                messageInput.value = '';
                adjustTextareaHeight();
            }
        });

        // Handle typing indicators
        messageInput.addEventListener('input', function() {
            if (!isTyping) {
                chatChannel.perform('typing');
                isTyping = true;
            }

            clearTimeout(typingTimer);
            typingTimer = setTimeout(() => {
                chatChannel.perform('stop_typing');
                isTyping = false;
            }, 1000);

            adjustTextareaHeight();
        });

        // Auto-resize textarea
        function adjustTextareaHeight() {
            messageInput.style.height = 'auto';
            messageInput.style.height = Math.min(messageInput.scrollHeight, 120) + 'px';
        }

        // Allow Enter to send, Shift+Enter for new line
        messageInput.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                messageForm.dispatchEvent(new Event('submit'));
            }
        });

        // Initial scroll to bottom
        scrollToBottom();
    });
</script>